services:
  go-server:
    # build:
    #   context: .
    #   target: final
    # volumes:
    #   - .:/app
    image: golang:1.24.2
    container_name: web
    restart: unless-stopped
    ports:
      - 8080:${PORT:-8080}  # Using fallback port if PORT is not set
    environment:
      - SERVICE_NAME=web
      - VIRTUAL_HOST=${DOMAIN:-web.local} 
      - VIRTUAL_PORT=${PORT:-8080}
      - PORT=${PORT:-8080}
    working_dir: /app
    command: >
      sh -c "go mod tidy && go run ."
    volumes:
      - .:/app
    networks:
      - nginx-net

  # Nginx reverse proxy
  proxy:
    image: nginxproxy/nginx-proxy:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx:/etc/nginx/conf.d/
    ports:
      - 80:80
      - 443:443
    environment:
      - VIRTUAL_HOST=${DOMAIN}

    labels:
      - "com.github.nginx-proxy.nginx"
    depends_on:
      - go-server
    networks:
      - nginx-net

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#   depends_on:
#     - db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

networks:
  nginx-net:
    driver: bridge  # Define the network if it isn't already defined
